import pygame
import random
import os
import time
import sys


pygame.init()
clock = pygame.time.Clock()


WIDTH = 500
HEIGHT = 600
Black = (0, 0, 0)
Blue = (152, 226, 249)

pygame.display.set_caption("FlappyBee")
screen = pygame.display.set_mode((WIDTH, HEIGHT))
BEE_IMG = pygame.transform.scale(pygame.image.load(os.path.join("imgs", "pszczola.png")).convert_alpha(), (500, 500))
BG = pygame.transform.scale(pygame.image.load(os.path.join("imgs", "tło.png")).convert_alpha(), (500, 600))
GROUND = pygame.transform.scale(pygame.image.load(os.path.join("imgs", "ground.png")).convert_alpha(), (500, 150))
TRUNK = pygame.transform.scale(pygame.image.load(os.path.join("imgs", "trunk.png")).convert_alpha(), (250, 500))
HONEY = pygame.transform.scale(pygame.image.load(os.path.join("imgs", "honey.png")).convert_alpha(), (70, 70))


def title(txt, x, y, size):
    cz = pygame.font.SysFont("Times New Roman", size)
    rend = cz.render(txt, 1, (123, 252, 0))
    x = (WIDTH - rend.get_rect().width) / 2
    y = (HEIGHT - rend.get_rect().height) / 4 * 3
    screen.blit(rend, (x, y))

    pygame.display.update()


def menu(txt, x, y, size):
    cz = pygame.font.SysFont("Times New Roman", size)
    rend = cz.render(txt, 1, (123, 252, 0))
    x = (WIDTH - rend.get_rect().width) / 2
    y = (HEIGHT - rend.get_rect().height) / 4 * 3
    screen.blit(rend, (x, y - 50))

    pygame.display.update()


def menu1(txt, x, y, size):
    cz = pygame.font.SysFont("Times New Roman", size)
    rend = cz.render(txt, 1, (123, 252, 0))
    x = (WIDTH - rend.get_rect().width) / 2
    y = (HEIGHT - rend.get_rect().height) / 2
    screen.blit(rend, (x, y - 75))

    pygame.display.update()


def logo():
    logo = pygame.image.load(os.path.join('logo.png'))
    screen.blit(logo, (-65, 150))

    pygame.display.update()


def przegrana(txt, x, y, size):
    cz = pygame.font.SysFont("Times New Roman", size)
    rend = cz.render(txt, 1, (255, 0, 0))
    x = (WIDTH - rend.get_rect().width) / 2
    y = (HEIGHT - rend.get_rect().height) / 2
    screen.blit(rend, (x, y))

    pygame.display.update()


def bonus(txt, x, y, size):
    cz = pygame.font.SysFont("Times New Roman", size)
    rend = cz.render(txt, 1, (0, 0, 0))
    x = (WIDTH - rend.get_rect().width) / 2
    y = (HEIGHT - rend.get_rect().height) / 4
    screen.blit(rend, (x, y))

    pygame.display.update()


class Bee:
    ANIMATION_TIME = 5
    MAX_ROTATION = 30
    ROT_VEL = 20
    BEE = BEE_IMG

    def __init__(self, x, y):
        self.x = x
        self.y = y
        self.tilt = 0
        self.tick_count = 0
        self.vel = 0
        self.height = self.y
        self.img_count = 0
        self.img = self.BEE
        self.hitbox = (self.x + 220, self.y + 220, 55, 55)

    def jump(self):
        self.vel = -9.5
        self.tick_count = 0
        self.height = self.y

    def move(self):
        self.tick_count += 1

        d = self.vel * self.tick_count + 1.5 * self.tick_count ** 2
        # jak dużo pikseli lecimy w góre lub w dół

        if d >= 16:
            d = 16
        if d < 0:
            d -= 2

        self.y = self.y + d

        if d < 0 or self.y < self.height:
            if self.tilt < self.MAX_ROTATION:
                self.tilt = self.MAX_ROTATION
        else:
            if self.tilt > -90:
                self.tilt -= self.ROT_VEL

    def draw(self, screen):
        self.img_count += 1

        if self.img_count < self.ANIMATION_TIME:
            self.img = self.BEE
            self.img_count = 0

        rotated_image = pygame.transform.rotate(self.img, self.tilt)
        new_rect = rotated_image.get_rect(center=self.img.get_rect(topleft=(self.x, self.y)).center)
        screen.blit(rotated_image, new_rect.topleft)
        self.hitbox = (self.x + 220, self.y + 220, 55, 55)
        # pygame.draw.rect(screen, (255, 0, 0), self.hitbox, 2)

    def hit(self):
        screen.fill(Black)
        przegrana("haha you lost", 40, 100, 70)
        time.sleep(2)


class Ground:
    VEL = 5
    WIDTH = GROUND.get_width()
    IMG = GROUND

    def __init__(self, y):
        self.y = y
        self.x1 = 0
        self.x2 = self.WIDTH
        self.hitbox1 = (self.x1, self.y + 100, 500, 50)
        self.hitbox2 = (self.x2, self.y + 100, 500, 50)

    def move(self):
        self.x1 -= self.VEL
        self.x2 -= self.VEL

        if self.x1 + self.WIDTH < 0:
            self.x1 = self.x2 + self.WIDTH

        if self.x2 + self.WIDTH < 0:
            self.x2 = self.x1 + self.WIDTH

    def draw(self, screen):
        screen.blit(self.IMG, (self.x1, self.y))
        screen.blit(self.IMG, (self.x2, self.y))
        self.hitbox1 = (self.x1, self.y + 100, 500, 50)
        self.hitbox2 = (self.x2, self.y + 100, 500, 50)
        # pygame.draw.rect(screen, (255, 0, 0), self.hitbox1, 2)
        # pygame.draw.rect(screen, (255, 0, 0), self.hitbox2, 2)


class Trunk:
    GAP = 200
    VEL = 5

    def __init__(self, x):
        self.x = x
        self.height = 0
        self.top = 0
        self.bottom = 0
        self.TOPTRUNK = pygame.transform.flip(TRUNK, False, True)
        self.BOTTOMTRUNK = TRUNK
        self.passed = False
        self.set_height()
        self.hitboxtop = (self.x + 80, self.top, 80, 490)
        self.hitboxbottom = (self.x + 80, self.bottom + 10, 80, 490)

    def set_height(self):
        self.height = random.randrange(50, 400)
        self.top = self.height - self.TOPTRUNK.get_height()
        self.bottom = self.height + self.GAP

    def move(self):
        self.x -= self.VEL

    def draw(self, screen):
        screen.blit(self.TOPTRUNK, (self.x, self.top))
        screen.blit(self.BOTTOMTRUNK, (self.x, self.bottom))
        self.hitboxtop = (self.x + 80, self.top, 80, 490)
        self.hitboxbottom = (self.x + 80, self.bottom + 10, 80, 490)
        # pygame.draw.rect(screen, (255, 0, 0), self.hitboxtop, 2)
        # pygame.draw.rect(screen, (255, 0, 0), self.hitboxbottom, 2)



def hit():
    bonus('+3 points', 30, 70, 30)


class Honey:
    VEL = 5
    BONUS = HONEY

    def __init__(self):
        self.y = random.randrange(100, 500)
        self.x = random.randrange(280, 450)
        self.passed = False
        self.hitbox = (self.x + 10, self.y + 10, 55, 50)

    def move(self):
        self.x -= self.VEL

    def draw(self, screen):
        screen.blit(self.BONUS, (self.x, self.y))
        self.hitbox = (self.x + 10, self.y + 10, 55, 50)
        # pygame.draw.rect(screen, (255, 0, 0), self.hitbox, 2)


def draw_window(screen, bee, ground, trunks, honeys):
    screen.blit(BG, (0, 0))
    for trunk in trunks:
        trunk.draw(screen)
    for honey in honeys:
        honey.draw(screen)

    bee.draw(screen)
    ground.draw(screen)
    pygame.display.update()


def main():
    bee = Bee(-15, -100)
    ground = Ground(450)
    trunks = [Trunk(400)]
    honeys = [Honey()]

    run = True
    clock = pygame.time.Clock()

    while run:
        clock.tick(30)
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                run = False
                pygame.quit()
                quit()
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_SPACE:
                    bee.jump()

        draw_window(screen, bee, ground, trunks, honeys)

        add_trunk = False
        rem = []
        for trunk in trunks:

            if trunk.x + trunk.TOPTRUNK.get_width() < 0:
                rem.append(trunk)

            if not trunk.passed and trunk.x < bee.x:
                trunk.passed = True
                add_trunk = True

            trunk.move()

            if trunk.hitboxtop[1] < bee.hitbox[1] < trunk.hitboxtop[1] + trunk.hitboxtop[3]:
                if bee.hitbox[0] + bee.hitbox[2] < trunk.hitboxtop[0] + trunk.hitboxtop[2]:
                    if trunk.hitboxtop[0] - bee.hitbox[0] < bee.hitbox[2]:
                        bee.hit()
            if trunk.hitboxbottom[1] < bee.hitbox[1] < trunk.hitboxbottom[1] + trunk.hitboxbottom[3]:
                if bee.hitbox[0] + bee.hitbox[2] < trunk.hitboxbottom[0] + trunk.hitboxbottom[2]:
                    if trunk.hitboxbottom[0] - bee.hitbox[0] < bee.hitbox[2]:
                        bee.hit()

            if trunk.hitboxtop[0] < bee.hitbox[0] < trunk.hitboxtop[0] + trunk.hitboxtop[2]:
                if bee.hitbox[1] - trunk.hitboxtop[1] < trunk.hitboxtop[3]:
                    bee.hit()
            if trunk.hitboxbottom[0] < bee.hitbox[0] < trunk.hitboxbottom[0] + trunk.hitboxbottom[2]:
                if trunk.hitboxbottom[1] - bee.hitbox[1] < bee.hitbox[3]:
                    bee.hit()

        if add_trunk:
            trunks.append(Trunk(400))

        for r in rem:
            trunks.remove(r)

        ground.move()
        bee.move()

        if ground.hitbox1[1] - (bee.hitbox[1] + bee.hitbox[3]) < 0:
            bee.hit()
        if ground.hitbox2[1] - (bee.hitbox[1] + bee.hitbox[3]) < 0:
            bee.hit()

        add_bonus = False
        remove = []
        for honey in honeys:

            if not honey.passed and honey.x < bee.x:
                honey.passed = True
                add_bonus = True

            honey.move()

        if add_bonus:
            honeys.append(Honey())

        for r in remove:
            honeys.remove(r)

        for honey in honeys:
            if honey.hitbox[1] < bee.hitbox[1] < honey.hitbox[1] + honey.hitbox[3]:
                if honey.hitbox[0] < bee.hitbox[0] < honey.hitbox[0] + honey.hitbox[2]:
                    hit()

            if honey.hitbox[0] < bee.hitbox[0] < honey.hitbox[0] + honey.hitbox[2]:
                if honey.hitbox[1] < bee.hitbox[1] < honey.hitbox[1] + honey.hitbox[3]:
                    hit()
                if honey.hitbox[1] < bee.hitbox[1] + bee.hitbox[3] < honey.hitbox[1] + honey.hitbox[3]:
                    hit()

        pygame.display.update()


display = 'intro'

while True:

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            quit()
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_1:
                main()
            if event.key == pygame.K_2:
                screen.fill(Blue)
            if event.key == pygame.K_3:
                sys.exit()

    if display == 'intro':
        logo()
        title('Welcome to FLAPPYBEE!!!', 40, 100, 20)
        time.sleep(3)
        screen.fill(Black)
    display = 'menu'
    if display == 'menu':
        menu1("1. PLAY   2. Scoreboard   3. Exit", 40, 100, 20)
        menu("ENTER THE NUMBER FROM THE KEYBOARD", 40, 100, 20)
    elif display == "game":
        pygame.display.update()